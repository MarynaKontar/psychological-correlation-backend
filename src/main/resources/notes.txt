App has three model levels:
entities (saved in db)
objects (for collecting and transform data from db collections)
dto (for hiding implementation details from app user)

But not all entities have corresponding objects, for example, ValueCompatibilityAnswersEntity
and User. They don`t have objects, but have corresponding dto,
because we are transformed and added it to another objects:
UserAccount, ValueProfileIndividual, ValueProfileMatching.

Because all of these, both entities and objects extends from AbstractEntity (no AbstractObject).
And this let have AbstractDtoConverter with global methods for converting
from objects(and some entities) to dto and vise versa.

Absence of AbstractObject and corresponding objects for ValueCompatibilityAnswersEntity
and User isn`t good architectural solution, but in another case
there will be redundant transformations and classes.
While i leave it in this form, then i will decide which is more suitable.

TokenEntity -> nothing
User -> SimpleUserDto
ValueCompatibilityAnswersEntity -> ValueCompatibilityAnswersDto

UserAccountEntity -> UserAccount -> UserAccountDto
UserMatchEntity -> UserMatch -> UserMatchDto
CredentialsEntity -> Credentials -> CredentialsDto

Another entities, objects and dtos are just embedded for more global classes.


ENDPOINTS:
GET:
/test/initTest
/test/generateTokenList
/account/getAllRegisteredAndPassedTestUsersForMatching
/account/getAllRegisteredAndPassedTestUsers
/match/getUsersForMatching

POST:
/test/goal
/test/state
/test/quality
/test/value-profile

/registration
/user/anonimRegistration
/registration/changePassword
/auth/login
/auth/loginFriendAccount
/account/inviteForMatching

/match/Percent
/match/Pearson
/match/value-profile-for-matching

PUT:
/account



Delete user when return to friend accout without registration.

//    @Query("{$find: {'userId': ?0, 'passed': ?1}, $sort: {'passDate': -1}, $limit: 1}")

https://drive.google.com/file/d/1XlljdGSgrBI2bKiqZJ5TVxPLzHoXacI0/view?usp=sharing

Replace Credentials to security directory?


============= Security=============
С фронтенда приходит запрос с токеном в хедере. Если данный endpoint is not secure, то пропускается фильтром (TokenAuthFilter) дальше, если же secure, то запускается аутентификация:
authenticated method in  AuthenticationManager -> authenticate method in TokenAuthProvider ->
в метод передается AuthorisationToken (impl Authentication), из него берется токен  (getPrincipal), затем токен ищется в базе данных, ищется его юзер, проверяется не истек ли срок токена, и если все нормально, то ,берется tokenPrincipal = (TokenPrincipal) userDetailsService.loadUserByUsername(user.getName())  и создается новый AuthorisationToken но уже с setAuthenticated(true).


При этом AuthorisationToken создается так, что у него нет credentials (=null):
private AuthorisationToken(String token) {
        super(token, null);
    }
А principal у него - это token.

In TokenAuthFilter мы вынимаем токен из хедера и  запускает процесс аутентификации:
Authentication authenticateResult = getAuthenticationManager().authenticate(authorisationToken);

 и он кастомно продолжается в TokenAuthProvider










 @Override
     public Page<UserAccount> getAllRegisteredAndPassedTestPageable(Pageable pageable) { // only thus who is registered (have userAccount) and passed test

         LookupOperation lookupOperation = LookupOperation.newLookup()
                 .from("valueCompatibilityAnswersEntity")
                 .localField("userId")
                 .foreignField("userId")
                 .as("userAccountEntityInfo");


         FacetOperation facetOperation = facet(
                 Aggregation.skip(((pageable.getPageNumber())*pageable.getPageSize())),
                 Aggregation.limit(pageable.getPageSize())
         ).as("userAccountEntity")
                 .and(
                         count().as("count")
                 ).as("COUNT");

         Fields fields = Fields.fields("_id", "userId", "accountType");
         Aggregation aggregation = Aggregation.newAggregation(
                 Aggregation.match(Criteria.where("userId").ne(userService.getPrincipalUser().getId())),
                 lookupOperation,
                 unwind("userAccountEntityInfo"),
                 Aggregation.match(Criteria.where("userAccountEntityInfo").ne(null)),
                 Aggregation.match(Criteria.where("userAccountEntityInfo.passed").is(true)),
                 group(fields).addToSet("userId").as("userIds")
 //                project(fields),
 //                Aggregation.sort(Sort.Direction.DESC, "userId")
 //                facetOperation
 //                Aggregation.skip(((pageable.getPageNumber())*pageable.getPageSize())),
 //                Aggregation.limit(pageable.getPageSize())
                 );

         AggregationResults<Document> aggregationResultDoc = mongoOperations.aggregate(aggregation, "userAccountEntity", Document.class);
         Document aggregationResult = aggregationResultDoc.getUniqueMappedResult();
         List<Document> documentResults =  (List<Document>) aggregationResult.get("userAccountEntity");
         List<UserAccountEntity> results = new ArrayList<>();
         documentResults.forEach(document -> results.add((UserAccountEntity) document.get("fg")));
 //        ArrayList<LinkedHashMap<String,Integer>> countListMap = (ArrayList<LinkedHashMap<String, Integer>>) uniqueMappedResult.get(0);
 //        LinkedHashMap<String,Integer> countMap = (LinkedHashMap<String,Integer>) uniqueMappedResult.get(1);
         LinkedHashMap<String,Integer> count = (LinkedHashMap<String,Integer>) aggregationResult.get("COUNT");


 //        AggregationResults<UserAccountEntity> aggregationResults = mongoOperations.aggregate(aggregation, "userAccountEntity", UserAccountEntity.class);
 //        List<UserAccountEntity> results = aggregationResults.getMappedResults();
         List<UserAccount> userAccounts = results.stream()
                 .map(userAccountEntity -> getUserAccount(userAccountEntity))
                 .collect(Collectors.toList());

         Page<UserAccount> page = new PageImpl<UserAccount>(userAccounts, pageable, getAllRegisteredAndPassedTest().size());
         return page;
     }